{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getStateDefault","title","items","Array","fill","value","backgroundColor","isX","endGame","this","forEach","item","index","style","color","cursor","push","className","key","onClick","selectedItem","filter","length","resetGame","setState","slice","checkEndGame","result","getResult","i","a","b","c","Object","assign","map","renderItems","renderButton","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAsHeA,G,kBAlHb,aAAc,IAAD,8BACX,+CACKC,MAAQ,EAAKC,kBAFP,E,+EAMX,MAAO,CACLC,MAAO,GACPC,MAAOC,MAAM,GAAGC,KAAK,CACnBC,MAAO,KACPC,gBAAiB,YAEnBC,KAAK,EACLC,SAAS,K,oCAIE,IAAD,OACRN,EAAQ,GAeZ,OAbAO,KAAKV,MAAMG,MAAMQ,SAAQ,SAACC,EAAMC,GAC9B,IAAIC,EAAQ,CACVC,MAAOH,EAAKN,MAAwB,MAAfM,EAAKN,MAAgB,UAAY,UAAa,UACnEC,gBAAiBK,EAAKL,gBACtBS,OAAQ,EAAKhB,MAAMS,QAAU,cAAgB,MAE/CN,EAAMc,KACJ,0BAAMC,UAAU,OAAOJ,MAAOA,EAAOK,IAAKN,EAAOO,QAAS,kBAAM,EAAKC,aAAaR,KAC/ED,EAAKN,WAKLH,I,qCAGO,IAAD,OACb,GAAIO,KAAKV,MAAMG,MAAMmB,QAAO,SAAAV,GAAI,OAAIA,EAAKN,SAAOiB,OAC9C,OAAQ,4BAAQL,UAAU,YAAYE,QAAS,kBAAM,EAAKI,cAAlD,gB,kCAKVd,KAAKe,SAASf,KAAKT,qB,mCAGRY,GACX,IAAIV,EAAQO,KAAKV,MAAMG,MAAMuB,QAE1BvB,EAAMU,GAAOP,OAASI,KAAKV,MAAMS,UAIpCN,EAAMU,GAAS,CACbP,MAAOI,KAAKV,MAAMQ,IAAM,IAAM,KAGhCE,KAAKiB,aAAaxB,GAElBO,KAAKe,SAAS,CACZtB,MAAOA,EACPK,KAAME,KAAKV,MAAMQ,S,kCAMnB,MAAO,CACL,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,M,mCAIEL,GAGX,IAFA,IAAIyB,EAASlB,KAAKmB,YAETC,EAAI,EAAGA,EAAIF,EAAOL,OAAQO,IAAK,CAAC,IAAD,cACtBF,EAAOE,GADe,GACjCC,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KAEtC,GAAI9B,EAAM4B,GAAGzB,OAASH,EAAM4B,GAAGzB,QAAUH,EAAM6B,GAAG1B,OAASH,EAAM4B,GAAGzB,QAAUH,EAAM8B,GAAG3B,MAOrF,OANAH,EAAM4B,GAAK5B,EAAM6B,GAAK7B,EAAM8B,GAAKC,OAAOC,OAAOhC,EAAM4B,GAAI,CACvDxB,gBAAiB,iBAEnBG,KAAKe,SAAS,CACZhB,SAAS,IAKXN,EAAMoB,SAAWpB,EAAMmB,QAAO,SAAAV,GAAI,OAAIA,EAAKN,SAAOiB,SACpDpB,EAAMiC,KAAI,SAAAxB,GAAI,OAAIA,EAAKL,gBAAkB,aACzCG,KAAKe,SAAS,CACZhB,SAAS,O,+BAMb,OACE,yBAAKS,UAAU,OACb,yBAAKA,UAAU,SACZR,KAAK2B,cACL3B,KAAK4B,qB,GA5GEC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.018c173e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = this.getStateDefault();\n  }\n\n  getStateDefault() {\n    return {\n      title: '',\n      items: Array(9).fill({\n        value: null,\n        backgroundColor: '#FFFFFF',\n      }),\n      isX: true,\n      endGame: false,\n    };\n  }\n\n  renderItems() {\n    let items = [];\n\n    this.state.items.forEach((item, index) => {\n      let style = {\n        color: item.value ? (item.value === 'X' ? '#FF0000' : '#006600') : '#FFFFFF',\n        backgroundColor: item.backgroundColor,\n        cursor: this.state.endGame ? 'not-allowed' : null\n      };\n      items.push(\n        <span className=\"item\" style={style} key={index} onClick={() => this.selectedItem(index)}>\n          {item.value}\n        </span>\n      );\n    });\n\n    return items;\n  }\n\n  renderButton() {\n    if (this.state.items.filter(item => item.value).length) {\n      return (<button className=\"ResetGame\" onClick={() => this.resetGame()}>Reset Game</button>);\n    }\n  }\n\n  resetGame() {\n    this.setState(this.getStateDefault());\n  }\n\n  selectedItem(index) {\n    let items = this.state.items.slice();\n\n    if(items[index].value || this.state.endGame){\n      return;\n    }\n\n    items[index] = {\n      value: this.state.isX ? 'X' : 'O',\n    };\n\n    this.checkEndGame(items);\n\n    this.setState({\n      items: items,\n      isX: !this.state.isX\n    });\n  }\n\n  getResult() {\n    // TODO: Hiện tại mảng này đang fix cứng, sẽ nghiên cứu công thức để tính cho mọi trường hợp ở pull sau\n    return [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n  }\n\n  checkEndGame(items) {\n    let result = this.getResult();\n\n    for (let i = 0; i < result.length; i++) {\n      let [a, b, c] = result[i];\n      if (items[a].value && items[a].value === items[b].value && items[a].value === items[c].value) {\n        items[a] = items[b] = items[c] = Object.assign(items[a], {\n          backgroundColor: '#CCCC33',\n        });\n        this.setState({\n          endGame: true\n        });\n        return;\n      }\n    }\n    if (items.length === items.filter(item => item.value).length) {\n      items.map(item => item.backgroundColor = '#000000');\n      this.setState({\n        endGame: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Board\">\n          {this.renderItems()}\n          {this.renderButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}